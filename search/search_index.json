{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cloudflare R2","text":"<p>Python wrapper on Cloudflare R2. See Cloudflare API.</p>"},{"location":"#access-bucket","title":"Access Bucket","text":"<p>         Bases: <code>CF</code></p> <p>Add secrets to .env file:</p> Field in .env Cloudflare API Credential Where credential found <code>CF_ACCT_ID</code> Account ID <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2</code> <code>CF_R2_REGION</code> Default Region: <code>apac</code> See options <code>R2_ACCESS_KEY_ID</code> Key When R2 Token created in <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens</code> <code>R2_SECRET_ACCESS_KEY</code> Secret When R2 Token created in <code>https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n&gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n&gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n&gt;&gt;&gt; r2 = CloudflareR2()\n&gt;&gt;&gt; type(r2.resource)\n&lt;class 'boto3.resources.factory.s3.ServiceResource'&gt;\n</code></pre> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>class CloudflareR2(CF):\n\"\"\"\n    Add secrets to .env file:\n    Field in .env | Cloudflare API Credential | Where credential found\n    :--|:--:|:--\n    `CF_ACCT_ID` | Account ID | `https://dash.cloudflare.com/&lt;acct_id&gt;/r2`\n    `CF_R2_REGION` | Default Region: `apac` | See [options](https://developers.cloudflare.com/r2/learning/data-location/#available-hints)\n    `R2_ACCESS_KEY_ID` | Key | When R2 Token created in `https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens`\n    `R2_SECRET_ACCESS_KEY` | Secret | When R2 Token created in `https://dash.cloudflare.com/&lt;acct_id&gt;/r2/overview/api-tokens`\n    Examples:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n        &gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n        &gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n        &gt;&gt;&gt; r2 = CloudflareR2()\n        &gt;&gt;&gt; type(r2.resource)\n        &lt;class 'boto3.resources.factory.s3.ServiceResource'&gt;\n    \"\"\"  # noqa: E501\nregion: str = Field(default=\"apac\", repr=True, env=\"CF_R2_REGION\")\naccess_key_id: str = Field(default=\"ABC\", repr=False, env=\"R2_ACCESS_KEY_ID\")\nsecret_access_key: str = Field(\ndefault=\"XYZ\", repr=False, env=\"R2_SECRET_ACCESS_KEY\"\n)\n@property\ndef endpoint_url(self):\nreturn f\"https://{self.account_id}.r2.cloudflarestorage.com\"\n@property\ndef resource(self):\n\"\"\"Access to buckets via instance, e.g. `r2.resource.Bucket('&lt;name&gt;')`\"\"\"\nreturn boto3.resource(\n\"s3\",\nendpoint_url=self.endpoint_url,\naws_access_key_id=self.access_key_id,\naws_secret_access_key=self.secret_access_key,\nregion_name=self.region,\n)\ndef get_bucket(self, bucket_name: str):\n\"\"\"Get an R2 bucket instance.\"\"\"\nreturn self.resource.Bucket(bucket_name)\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2-attributes","title":"Attributes","text":""},{"location":"#cloudflare_r2.main.CloudflareR2.resource","title":"<code>resource</code>  <code>property</code>","text":"<p>Access to buckets via instance, e.g. <code>r2.resource.Bucket('&lt;name&gt;')</code></p>"},{"location":"#cloudflare_r2.main.CloudflareR2-functions","title":"Functions","text":""},{"location":"#cloudflare_r2.main.CloudflareR2.get_bucket","title":"<code>get_bucket(bucket_name)</code>","text":"<p>Get an R2 bucket instance.</p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def get_bucket(self, bucket_name: str):\n\"\"\"Get an R2 bucket instance.\"\"\"\nreturn self.resource.Bucket(bucket_name)\n</code></pre>"},{"location":"#common-actions-on-bucket","title":"Common Actions on Bucket","text":"<p>         Bases: <code>CloudflareR2</code></p> <p>Helper function that can be assigned to each bucket.</p> <p>Note AWS API reference vs. R2</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n&gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n&gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n&gt;&gt;&gt; obj = CloudflareR2Bucket(name='test')\n&gt;&gt;&gt; type(obj.bucket)\n&lt;class 'boto3.resources.factory.s3.Bucket'&gt;\n</code></pre> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>class CloudflareR2Bucket(CloudflareR2):\n\"\"\"\n    Helper function that can be assigned to each bucket.\n    Note [AWS API reference](https://docs.aws.amazon.com/AmazonS3/latest/API) vs. [R2](https://developers.cloudflare.com/r2/data-access/s3-api/api/)\n    Examples:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ['CF_ACCT_ID'] = \"ACT\"\n        &gt;&gt;&gt; os.environ['R2_ACCESS_KEY_ID'] = \"ABC\"\n        &gt;&gt;&gt; os.environ['R2_SECRET_ACCESS_KEY'] = \"XYZ\"\n        &gt;&gt;&gt; obj = CloudflareR2Bucket(name='test')\n        &gt;&gt;&gt; type(obj.bucket)\n        &lt;class 'boto3.resources.factory.s3.Bucket'&gt;\n    \"\"\"  # noqa: E501\nname: str\n@property\ndef bucket(self):\nreturn self.get_bucket(self.name)\n@property\ndef client(self):\nreturn self.bucket.meta.client\ndef get(self, key: str, *args, **kwargs) -&gt; dict | None:\n\"\"\"Assumes the key prefix exists in the bucket. See helper\n        for [boto3 get_object](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/get_object.html)\n        Args:\n            key (str): Should exist in the bucket.\n        Returns:\n            dict | None: Returns `None` if not found.\n        \"\"\"  # noqa: E501\ntry:\nreturn self.client.get_object(Bucket=self.name, Key=key, *args, **kwargs)\nexcept Exception:\nreturn None\ndef fetch(self, *args, **kwargs) -&gt; dict:\n\"\"\"Each bucket contain content prefixes but can only be fetched by batches. Each batch is limited\n        to a max of 1000 prefixes. Without arguments included in this call, will default to the first 1000 keys.\n        See details in [boto3 list-objects-v2 API docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/list_objects_v2.html#list-objects-v2)\n        \"\"\"  # noqa: E501\nreturn self.client.list_objects_v2(Bucket=self.name, *args, **kwargs)\ndef all_items(self) -&gt; list[dict] | None:\n\"\"\"Using pagination conventions from s3 and r2, get all prefixes found in\n        the bucket name. Note this aggregates all `fetch()` calls, specifically limiting\n        the response to the \"Contents\" key of each `fetch()` call. Such key will\n        contain a list of dict-based prefixes.\n        Returns:\n            list[dict] | None: Get objects form the bucket\n        \"\"\"\ncontents = []\ncounter = 1\nnext_token = None\nwhile True:\nprint(f\"Accessing page {counter=}\")\nif counter == 1:\nres = self.fetch()\nelif next_token:\nres = self.fetch(ContinuationToken=next_token)\nelse:\nprint(\"Missing next token.\")\nbreak\nnext_token = res.get(\"NextContinuationToken\")\nif res.get(\"Contents\"):\ncontents.extend(res[\"Contents\"])\ncounter += 1\nif not res[\"IsTruncated\"]:  # is False if all results returned.\nprint(\"All results returned.\")\nreturn contents\n@classmethod\ndef filter_content(\ncls, filter_suffix: str, objects_list: list[dict]\n) -&gt; Iterator[dict]:\n\"\"\"Filter objects based on a `filter_suffix` from either:\n        1. List of objects from `self.all_items()`; or\n        2. _Contents_ key of `self.fetch()`. Note that each _Contents_ field of `fetch`\n        is a dict object, each object will contain a _Key_ field.\n        Args:\n            filter_suffix (str): Prefix terminates with what suffix\n            objects_list (list[dict]): List of objects previously fetched\n        Yields:\n            Iterator[dict]: Filtered `objects_list` based on `filter_suffix`\n        \"\"\"\nfor prefixed_obj in objects_list:\nif key := prefixed_obj.get(\"Key\"):\nif key.endswith(filter_suffix):\nyield prefixed_obj\ndef upload(self, file_like: str | Path, key: str, *args, **kwargs):\n\"\"\"[Upload](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/upload_fileobj.html) local `file_like` contents to r2-bucket path `key`.\n        Args:\n            file_like (str | Path): Local file\n            key (str): Remote location\n                Defaults to {}.\n        \"\"\"  # noqa: E501\nwith open(file_like, \"rb\") as read_file:\nreturn self.bucket.upload_fileobj(read_file, key, *args, **kwargs)\ndef download(self, key: str, local_file: str):\n\"\"\"With a r2-bucket `key`, [download](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/bucket/download_fileobj.html#download-fileobj) its contents to `local_file`.\n        Args:\n            key (str): Origin file to download\n            local_file (str): Where to download, how to name downloaded file\n        \"\"\"  # noqa: E501\nwith open(local_file, \"wb\") as write_file:\nreturn self.bucket.download_fileobj(key, write_file)\ndef get_root_prefixes(self):\n\"\"\"See adapted recipe from boto3 re: top-level [prefixes](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#list-top-level-common-prefixes-in-amazon-s3-bucket).\n        Returns:\n            list[str]: Matching prefixes in the root of the bucket.\n        \"\"\"  # noqa: E501\n_objs = []\npaginator = self.client.get_paginator(\"list_objects\")\nresult = paginator.paginate(Bucket=self.name, Delimiter=\"/\")\nfor prefix in result.search(\"CommonPrefixes\"):\n_objs.append(prefix.get(\"Prefix\"))  # type: ignore\nreturn _objs\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket-functions","title":"Functions","text":""},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.all_items","title":"<code>all_items()</code>","text":"<p>Using pagination conventions from s3 and r2, get all prefixes found in the bucket name. Note this aggregates all <code>fetch()</code> calls, specifically limiting the response to the \"Contents\" key of each <code>fetch()</code> call. Such key will contain a list of dict-based prefixes.</p> <p>Returns:</p> Type Description <code>list[dict] | None</code> <p>list[dict] | None: Get objects form the bucket</p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def all_items(self) -&gt; list[dict] | None:\n\"\"\"Using pagination conventions from s3 and r2, get all prefixes found in\n    the bucket name. Note this aggregates all `fetch()` calls, specifically limiting\n    the response to the \"Contents\" key of each `fetch()` call. Such key will\n    contain a list of dict-based prefixes.\n    Returns:\n        list[dict] | None: Get objects form the bucket\n    \"\"\"\ncontents = []\ncounter = 1\nnext_token = None\nwhile True:\nprint(f\"Accessing page {counter=}\")\nif counter == 1:\nres = self.fetch()\nelif next_token:\nres = self.fetch(ContinuationToken=next_token)\nelse:\nprint(\"Missing next token.\")\nbreak\nnext_token = res.get(\"NextContinuationToken\")\nif res.get(\"Contents\"):\ncontents.extend(res[\"Contents\"])\ncounter += 1\nif not res[\"IsTruncated\"]:  # is False if all results returned.\nprint(\"All results returned.\")\nreturn contents\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.download","title":"<code>download(key, local_file)</code>","text":"<p>With a r2-bucket <code>key</code>, download its contents to <code>local_file</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Origin file to download</p> required <code>local_file</code> <code>str</code> <p>Where to download, how to name downloaded file</p> required Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def download(self, key: str, local_file: str):\n\"\"\"With a r2-bucket `key`, [download](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/bucket/download_fileobj.html#download-fileobj) its contents to `local_file`.\n    Args:\n        key (str): Origin file to download\n        local_file (str): Where to download, how to name downloaded file\n    \"\"\"  # noqa: E501\nwith open(local_file, \"wb\") as write_file:\nreturn self.bucket.download_fileobj(key, write_file)\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.fetch","title":"<code>fetch(*args, **kwargs)</code>","text":"<p>Each bucket contain content prefixes but can only be fetched by batches. Each batch is limited to a max of 1000 prefixes. Without arguments included in this call, will default to the first 1000 keys.</p> <p>See details in boto3 list-objects-v2 API docs</p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def fetch(self, *args, **kwargs) -&gt; dict:\n\"\"\"Each bucket contain content prefixes but can only be fetched by batches. Each batch is limited\n    to a max of 1000 prefixes. Without arguments included in this call, will default to the first 1000 keys.\n    See details in [boto3 list-objects-v2 API docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/list_objects_v2.html#list-objects-v2)\n    \"\"\"  # noqa: E501\nreturn self.client.list_objects_v2(Bucket=self.name, *args, **kwargs)\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.filter_content","title":"<code>filter_content(filter_suffix, objects_list)</code>  <code>classmethod</code>","text":"<p>Filter objects based on a <code>filter_suffix</code> from either:</p> <ol> <li>List of objects from <code>self.all_items()</code>; or</li> <li>Contents key of <code>self.fetch()</code>. Note that each Contents field of <code>fetch</code> is a dict object, each object will contain a Key field.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>filter_suffix</code> <code>str</code> <p>Prefix terminates with what suffix</p> required <code>objects_list</code> <code>list[dict]</code> <p>List of objects previously fetched</p> required <p>Yields:</p> Type Description <code>Iterator[dict]</code> <p>Iterator[dict]: Filtered <code>objects_list</code> based on <code>filter_suffix</code></p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>@classmethod\ndef filter_content(\ncls, filter_suffix: str, objects_list: list[dict]\n) -&gt; Iterator[dict]:\n\"\"\"Filter objects based on a `filter_suffix` from either:\n    1. List of objects from `self.all_items()`; or\n    2. _Contents_ key of `self.fetch()`. Note that each _Contents_ field of `fetch`\n    is a dict object, each object will contain a _Key_ field.\n    Args:\n        filter_suffix (str): Prefix terminates with what suffix\n        objects_list (list[dict]): List of objects previously fetched\n    Yields:\n        Iterator[dict]: Filtered `objects_list` based on `filter_suffix`\n    \"\"\"\nfor prefixed_obj in objects_list:\nif key := prefixed_obj.get(\"Key\"):\nif key.endswith(filter_suffix):\nyield prefixed_obj\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.get","title":"<code>get(key, *args, **kwargs)</code>","text":"<p>Assumes the key prefix exists in the bucket. See helper for boto3 get_object</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Should exist in the bucket.</p> required <p>Returns:</p> Type Description <code>dict | None</code> <p>dict | None: Returns <code>None</code> if not found.</p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def get(self, key: str, *args, **kwargs) -&gt; dict | None:\n\"\"\"Assumes the key prefix exists in the bucket. See helper\n    for [boto3 get_object](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/get_object.html)\n    Args:\n        key (str): Should exist in the bucket.\n    Returns:\n        dict | None: Returns `None` if not found.\n    \"\"\"  # noqa: E501\ntry:\nreturn self.client.get_object(Bucket=self.name, Key=key, *args, **kwargs)\nexcept Exception:\nreturn None\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.get_root_prefixes","title":"<code>get_root_prefixes()</code>","text":"<p>See adapted recipe from boto3 re: top-level prefixes.</p> <p>Returns:</p> Type Description <p>list[str]: Matching prefixes in the root of the bucket.</p> Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def get_root_prefixes(self):\n\"\"\"See adapted recipe from boto3 re: top-level [prefixes](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#list-top-level-common-prefixes-in-amazon-s3-bucket).\n    Returns:\n        list[str]: Matching prefixes in the root of the bucket.\n    \"\"\"  # noqa: E501\n_objs = []\npaginator = self.client.get_paginator(\"list_objects\")\nresult = paginator.paginate(Bucket=self.name, Delimiter=\"/\")\nfor prefix in result.search(\"CommonPrefixes\"):\n_objs.append(prefix.get(\"Prefix\"))  # type: ignore\nreturn _objs\n</code></pre>"},{"location":"#cloudflare_r2.main.CloudflareR2Bucket.upload","title":"<code>upload(file_like, key, *args, **kwargs)</code>","text":"<p>Upload local <code>file_like</code> contents to r2-bucket path <code>key</code>.</p> <p>Parameters:</p> Name Type Description Default <code>file_like</code> <code>str | Path</code> <p>Local file</p> required <code>key</code> <code>str</code> <p>Remote location</p> <p>Defaults to {}.</p> required Source code in <code>cloudflare_r2/main.py</code> Python<pre><code>def upload(self, file_like: str | Path, key: str, *args, **kwargs):\n\"\"\"[Upload](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/upload_fileobj.html) local `file_like` contents to r2-bucket path `key`.\n    Args:\n        file_like (str | Path): Local file\n        key (str): Remote location\n            Defaults to {}.\n    \"\"\"  # noqa: E501\nwith open(file_like, \"rb\") as read_file:\nreturn self.bucket.upload_fileobj(read_file, key, *args, **kwargs)\n</code></pre>"}]}